import { createDogtailCssCompiler } from '../dogtailcss'
import { createClassUtils } from '../class-utils'
import { theme } from '../theme'
import { createCssFile } from '../cssFile'
import * as fs from 'fs'

import mock from 'mock-fs'

let tabSize = 4
let compiler = createDogtailCssCompiler(createClassUtils(), theme, { tabSize })

beforeAll(() => {
  mock(
    {
      design: {},
    },
    { createCwd: true, createTmp: true }
  )
})

afterAll(() => {
  mock.restore()
})

test('create cssFile instance', () => {
  const cssFile = createCssFile('dogtail.test.css', theme, compiler)
  cssFile.applyClasses()
  const result = fs.readFileSync('dogtail.test.css', 'utf8')

  expect(result).toEqual(
    `/* dogtailcss autogenerated file */

@media (min-width: 480px) {
}
@media (min-width: 640px) {
}
@media (min-width: 768px) {
}
@media (min-width: 1024px) {
}
@media (min-width: 1280px) {
}
@media (min-width: 1536px) {
}
`
  )
})

test('compile several screens', () => {
  const cssFile = createCssFile('dogtail.test.css', theme, compiler)
  cssFile.addClasses(
    new Set(
      'text-black xs:text-white lg:text-(200,100,100) 2xl:text-maroon'.split(
        /\s+/
      )
    )
  )
  cssFile.applyClasses()
  const result = fs.readFileSync('dogtail.test.css', 'utf8')
  //   console.log(result)
  expect(result).toEqual(
    `/* dogtailcss autogenerated file */

.text-black {
    color: #000;
}

@media (min-width: 480px) {
    .xs\\:text-white {
        color: #fff;
    }

}
@media (min-width: 640px) {
}
@media (min-width: 768px) {
}
@media (min-width: 1024px) {
    .lg\\:text-\\(200\\,100\\,100\\) {
        color: rgb(200,100,100);
    }

}
@media (min-width: 1280px) {
}
@media (min-width: 1536px) {
    .\\32 xl\\:text-maroon {
        color: #800000;
    }

}
`
  )
})
